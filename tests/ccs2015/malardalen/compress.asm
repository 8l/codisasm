;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2013 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3073-7154-46			    |
; |				  INRIA	NANCY				    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	64216EB2FA332723464ACF26D665A2D7
; Input	CRC32 :	93D17A67

; File Name   :	/media/sf_ccs2015/malardalen/compress.exe
; Format      :	Portable executable for	80386 (PE)
; Imagebase   :	400000
; Section 1. (virtual address 00001000)
; Virtual size			: 000006EC (   1772.)
; Section size in file		: 00000800 (   2048.)
; Offset to raw	data for section: 00000400
; Flags	60300020: Text Executable Readable
; Alignment	: 4 bytes

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	dword public 'CODE' use32
		assume cs:_text
		;org 401000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public start
start		proc near

var_C		= dword	ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	[ebp+var_C], 32h
		call	sub_401063
		mov	dword_402000, 10h
		mov	eax, dword_402000
		mov	edx, 1
		mov	ecx, eax
		shl	edx, cl
		mov	eax, edx
		mov	dword_402004, eax
		mov	eax, [ebp+var_C]
		mov	ds:dword_406098, eax
		mov	ds:dword_4060B4, 35h
		mov	ds:dword_4060B0, offset	dword_4060C0
		mov	ds:dword_4060F4, offset	dword_406060
		call	sub_4010D9
		mov	eax, 0
		leave
		retn
start		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_401063	proc near		; CODE XREF: start+Dp

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		mov	[ebp+var_4], 1
		mov	[ebp+var_8], 0
		jmp	short loc_4010D1
; ---------------------------------------------------------------------------

loc_401079:				; CODE XREF: sub_401063+72j
		mov	eax, [ebp+var_8]
		mov	[ebp+var_C], eax
		mov	eax, [ebp+var_4]
		imul	eax, 85h
		lea	ecx, [eax+51h]
		mov	edx, 103114C7h
		mov	eax, ecx
		imul	edx
		sar	edx, 9
		mov	eax, ecx
		sar	eax, 1Fh
		sub	edx, eax
		mov	eax, edx
		mov	[ebp+var_4], eax
		mov	eax, [ebp+var_4]
		imul	eax, 1F9Fh
		sub	ecx, eax
		mov	eax, ecx
		mov	[ebp+var_4], eax
		mov	eax, [ebp+var_4]
		cdq
		shr	edx, 18h
		add	eax, edx
		movzx	eax, al
		sub	eax, edx
		mov	edx, eax
		mov	eax, [ebp+var_8]
		add	eax, offset dword_4060C0
		mov	[eax], dl
		add	[ebp+var_8], 1

loc_4010D1:				; CODE XREF: sub_401063+14j
		cmp	[ebp+var_8], 31h
		jle	short loc_401079
		leave
		retn
sub_401063	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_4010D9	proc near		; CODE XREF: start+57p

var_48		= dword	ptr -48h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_1C		= dword	ptr -1Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	ebx, 0
		mov	ds:dword_40601C, 0
		mov	ds:dword_406040, 3
		mov	ds:dword_406018, 0
		mov	ds:dword_40600C, 0
		mov	ds:dword_406010, 0
		mov	dword_40201C, 1
		mov	dword_402018, 2710h
		mov	ds:dword_406044, 9
		mov	eax, ds:dword_406044
		mov	edx, 1
		mov	ecx, eax
		shl	edx, cl
		mov	eax, edx
		sub	eax, 1
		mov	ds:dword_4067C4, eax
		mov	eax, dword_402014
		test	eax, eax
		jz	short loc_40115F
		mov	eax, 101h
		jmp	short loc_401164
; ---------------------------------------------------------------------------

loc_40115F:				; CODE XREF: sub_4010D9+7Dj
		mov	eax, 100h

loc_401164:				; CODE XREF: sub_4010D9+84j
		mov	ds:dword_406000, eax
		call	sub_401410
		mov	esi, eax
		mov	[ebp+var_2C], 0
		mov	edi, dword_402008
		jmp	short loc_401185
; ---------------------------------------------------------------------------

loc_40117F:				; CODE XREF: sub_4010D9+B2j
		add	[ebp+var_2C], 1
		add	edi, edi

loc_401185:				; CODE XREF: sub_4010D9+A4j
		cmp	edi, 0FFFFh
		jle	short loc_40117F
		mov	eax, 8
		sub	eax, [ebp+var_2C]
		mov	[ebp+var_2C], eax
		mov	eax, dword_402008
		mov	[ebp+var_30], eax
		mov	[esp+48h+var_48], eax
		call	sub_401383
		jmp	loc_4012B0
; ---------------------------------------------------------------------------

loc_4011AD:				; CODE XREF: sub_4010D9+1DEj
		mov	[ebp+var_1C], 0
		call	sub_401410
		mov	edx, eax
		mov	eax, dword_40201C
		add	eax, 1
		mov	dword_40201C, eax
		mov	eax, dword_402000
		mov	edi, edx
		mov	ecx, eax
		shl	edi, cl
		mov	eax, edi
		lea	edi, [eax+esi]
		mov	eax, edx
		movzx	ecx, byte ptr [ebp+var_2C]
		shl	eax, cl
		xor	eax, esi
		mov	ebx, eax
		mov	eax, ds:dword_406100[ebx*4]
		cmp	eax, edi
		jnz	short loc_4011FF
		movzx	eax, ds:word_4065C0[ebx+ebx]
		movzx	esi, ax
		jmp	loc_4012B0
; ---------------------------------------------------------------------------

loc_4011FF:				; CODE XREF: sub_4010D9+114j
		mov	eax, ds:dword_406100[ebx*4]
		test	eax, eax
		jns	short loc_40120C
		jmp	short loc_401256
; ---------------------------------------------------------------------------

loc_40120C:				; CODE XREF: sub_4010D9+12Fj
		mov	esi, [ebp+var_30]
		sub	esi, ebx
		test	ebx, ebx
		jnz	short loc_40121A
		mov	esi, 1

loc_40121A:				; CODE XREF: sub_4010D9+13Aj
					; sub_4010D9+17Bj
		sub	ebx, esi
		test	ebx, ebx
		jns	short loc_401223
		add	ebx, [ebp+var_30]

loc_401223:				; CODE XREF: sub_4010D9+145j
		mov	eax, ds:dword_406100[ebx*4]
		cmp	eax, edi
		jnz	short loc_40123B
		movzx	eax, ds:word_4065C0[ebx+ebx]
		movzx	esi, ax
		jmp	short loc_4012B0
; ---------------------------------------------------------------------------

loc_40123B:				; CODE XREF: sub_4010D9+153j
		mov	eax, ds:dword_406100[ebx*4]
		test	eax, eax
		jle	short loc_401256
		add	[ebp+var_1C], 1
		mov	eax, dword_40201C
		cmp	[ebp+var_1C], eax
		jge	short loc_401256
		jmp	short loc_40121A
; ---------------------------------------------------------------------------

loc_401256:				; CODE XREF: sub_4010D9+131j
					; sub_4010D9+16Bj ...
		mov	eax, ds:dword_406018
		add	eax, 1
		mov	ds:dword_406018, eax
		mov	esi, edx
		mov	edx, ds:dword_406000
		mov	eax, dword_402004
		cmp	edx, eax
		jge	short loc_401293
		mov	eax, ds:dword_406000
		lea	edx, [eax+1]
		mov	ds:dword_406000, edx
		mov	ds:word_4065C0[ebx+ebx], ax
		mov	ds:dword_406100[ebx*4],	edi
		jmp	short loc_4012B0
; ---------------------------------------------------------------------------

loc_401293:				; CODE XREF: sub_4010D9+199j
		mov	edx, dword_40201C
		mov	eax, dword_402018
		cmp	edx, eax
		jl	short loc_4012B0
		mov	eax, dword_402014
		test	eax, eax
		jz	short loc_4012B0
		call	sub_4012DF

loc_4012B0:				; CODE XREF: sub_4010D9+CFj
					; sub_4010D9+121j ...
		mov	eax, ds:dword_406098
		test	eax, eax
		jg	loc_4011AD
		mov	edx, ds:dword_406040
		mov	eax, dword_40201C
		cmp	edx, eax
		jle	short loc_4012D6
		mov	ds:dword_406004, 2

loc_4012D6:				; CODE XREF: sub_4010D9+1F1j
		nop
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_4010D9	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_4012DF	proc near		; CODE XREF: sub_4010D9+1D2p

var_18		= dword	ptr -18h

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	eax, dword_40201C
		add	eax, 2710h
		mov	dword_402018, eax
		mov	eax, dword_40201C
		cmp	eax, 7FFFFFh
		jle	short loc_401322
		mov	eax, ds:dword_406040
		sar	eax, 8
		mov	ebx, eax
		test	ebx, ebx
		jnz	short loc_401316
		mov	ebx, 7FFFFFFFh
		jmp	short loc_401335
; ---------------------------------------------------------------------------

loc_401316:				; CODE XREF: sub_4012DF+2Ej
		mov	eax, dword_40201C
		cdq
		idiv	ebx
		mov	ebx, eax
		jmp	short loc_401335
; ---------------------------------------------------------------------------

loc_401322:				; CODE XREF: sub_4012DF+20j
		mov	eax, dword_40201C
		shl	eax, 8
		mov	ecx, ds:dword_406040
		cdq
		idiv	ecx
		mov	ebx, eax

loc_401335:				; CODE XREF: sub_4012DF+35j
					; sub_4012DF+41j
		mov	eax, ds:dword_406010
		cmp	ebx, eax
		jle	short loc_401346
		mov	ds:dword_406010, ebx
		jmp	short loc_40137D
; ---------------------------------------------------------------------------

loc_401346:				; CODE XREF: sub_4012DF+5Dj
		mov	ds:dword_406010, 0
		mov	eax, dword_402008
		mov	[esp+18h+var_18], eax
		call	sub_401383
		mov	ds:dword_406000, 101h
		mov	ds:dword_40600C, 1
		mov	[esp+18h+var_18], 100h
		call	sub_4014B8

loc_40137D:				; CODE XREF: sub_4012DF+65j
		add	esp, 14h
		pop	ebx
		pop	ebp
		retn
sub_4012DF	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_401383	proc near		; CODE XREF: sub_4010D9+CAp
					; sub_4012DF+79p

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		mov	eax, [ebp+arg_0]
		shl	eax, 2
		lea	ebx, dword_406100[eax]
		mov	esi, 0FFFFFFFFh
		mov	eax, [ebp+arg_0]
		lea	edi, [eax-10h]

loc_4013A0:				; CODE XREF: sub_401383+75j
		lea	eax, [ebx-40h]
		mov	[eax], esi
		lea	eax, [ebx-3Ch]
		mov	[eax], esi
		lea	eax, [ebx-38h]
		mov	[eax], esi
		lea	eax, [ebx-34h]
		mov	[eax], esi
		lea	eax, [ebx-30h]
		mov	[eax], esi
		lea	eax, [ebx-2Ch]
		mov	[eax], esi
		lea	eax, [ebx-28h]
		mov	[eax], esi
		lea	eax, [ebx-24h]
		mov	[eax], esi
		lea	eax, [ebx-20h]
		mov	[eax], esi
		lea	eax, [ebx-1Ch]
		mov	[eax], esi
		lea	eax, [ebx-18h]
		mov	[eax], esi
		lea	eax, [ebx-14h]
		mov	[eax], esi
		lea	eax, [ebx-10h]
		mov	[eax], esi
		lea	eax, [ebx-0Ch]
		mov	[eax], esi
		lea	eax, [ebx-8]
		mov	[eax], esi
		lea	eax, [ebx-4]
		mov	[eax], esi
		sub	ebx, 40h
		sub	edi, 10h
		test	edi, edi
		jns	short loc_4013A0
		add	edi, 10h
		jmp	short loc_401407
; ---------------------------------------------------------------------------

loc_4013FF:				; CODE XREF: sub_401383+86j
		sub	ebx, 4
		mov	[ebx], esi
		sub	edi, 1

loc_401407:				; CODE XREF: sub_401383+7Aj
		test	edi, edi
		jg	short loc_4013FF
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_401383	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_401410	proc near		; CODE XREF: sub_4010D9+90p
					; sub_4010D9+DBp
		push	ebp
		mov	ebp, esp
		mov	eax, ds:dword_406098
		test	eax, eax
		jle	short loc_401451
		mov	eax, ds:dword_4060B4
		lea	edx, [eax-1]
		mov	ds:dword_4060B4, edx
		test	eax, eax
		jle	short loc_401451
		mov	eax, ds:dword_406098
		sub	eax, 1
		mov	ds:dword_406098, eax
		mov	eax, ds:dword_4060B0
		lea	edx, [eax+1]
		mov	ds:dword_4060B0, edx
		movzx	eax, byte ptr [eax]
		movzx	eax, al
		jmp	short loc_401456
; ---------------------------------------------------------------------------

loc_401451:				; CODE XREF: sub_401410+Aj
					; sub_401410+1Cj
		mov	eax, 0FFFFFFFFh

loc_401456:				; CODE XREF: sub_401410+3Fj
		pop	ebp
		retn
sub_401410	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_401458	proc near		; CODE XREF: sub_4014B8+CDp

var_4		= byte ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 4
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_4], al
		mov	eax, ds:dword_4060F4
		lea	edx, [eax+1]
		mov	ds:dword_4060F4, edx
		movzx	edx, [ebp+var_4]
		mov	[eax], dl
		leave
		retn
sub_401458	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_40147A	proc near		; CODE XREF: sub_4014B8+128p
					; sub_4014B8+1ECp

var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		mov	[ebp+var_4], 0
		jmp	short loc_4014A8
; ---------------------------------------------------------------------------

loc_401489:				; CODE XREF: sub_40147A+3Aj
		mov	eax, ds:dword_4060F4
		lea	edx, [eax+1]
		mov	ds:dword_4060F4, edx
		mov	ecx, [ebp+var_4]
		mov	edx, [ebp+arg_0]
		add	edx, ecx
		movzx	edx, byte ptr [edx]
		mov	[eax], dl
		add	[ebp+var_4], 1

loc_4014A8:				; CODE XREF: sub_40147A+Dj
		mov	eax, [ebp+var_4]
		cmp	eax, [ebp+arg_4]
		jge	short locret_4014B6
		cmp	[ebp+var_4], 0Fh
		jle	short loc_401489

locret_4014B6:				; CODE XREF: sub_40147A+34j
		leave
		retn
sub_40147A	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_4014B8	proc near		; CODE XREF: sub_4012DF+99p

var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 8
		mov	edi, ds:dword_40601C
		mov	esi, ds:dword_406044
		mov	ebx, offset dword_40609C
		cmp	[ebp+arg_0], 0
		js	loc_40167D
		mov	eax, edi
		sar	eax, 3
		add	ebx, eax
		and	edi, 7
		movzx	eax, byte ptr [ebx]
		movzx	edx, byte_402029[edi]
		and	edx, eax
		mov	eax, [ebp+arg_0]
		mov	ecx, edi
		shl	eax, cl
		or	edx, eax
		movzx	eax, byte_402020[edi]
		and	eax, edx
		mov	[ebx], al
		add	ebx, 1
		lea	eax, [edi-8]
		add	esi, eax
		mov	eax, 8
		sub	eax, edi
		mov	ecx, eax
		sar	[ebp+arg_0], cl
		cmp	esi, 7
		jle	short loc_401530
		mov	eax, ebx
		lea	ebx, [eax+1]
		mov	edx, [ebp+arg_0]
		mov	[eax], dl
		sar	[ebp+arg_0], 8
		sub	esi, 8

loc_401530:				; CODE XREF: sub_4014B8+65j
		test	esi, esi
		jz	short loc_401539
		mov	eax, [ebp+arg_0]
		mov	[ebx], al

loc_401539:				; CODE XREF: sub_4014B8+7Aj
		mov	edx, ds:dword_40601C
		mov	eax, ds:dword_406044
		add	eax, edx
		mov	ds:dword_40601C, eax
		mov	eax, ds:dword_406044
		lea	edx, ds:0[eax*8]
		mov	eax, ds:dword_40601C
		cmp	edx, eax
		jnz	short loc_4015AB
		mov	ebx, offset dword_40609C
		mov	esi, ds:dword_406044
		mov	eax, ds:dword_406040
		add	eax, esi
		mov	ds:dword_406040, eax

loc_401577:				; CODE XREF: sub_4014B8+E7j
		mov	eax, ebx
		lea	ebx, [eax+1]
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		mov	[esp+14h+var_14], eax
		call	sub_401458
		sub	esi, 1
		test	esi, esi
		jz	short loc_4015A1
		mov	edx, ebx
		mov	eax, offset dword_40609C
		sub	edx, eax
		mov	eax, edx
		cmp	eax, 0Fh
		jle	short loc_401577

loc_4015A1:				; CODE XREF: sub_4014B8+D7j
		mov	ds:dword_40601C, 0

loc_4015AB:				; CODE XREF: sub_4014B8+A6j
		mov	edx, ds:dword_406000
		mov	eax, ds:dword_4067C4
		cmp	edx, eax
		jg	short loc_4015C7
		mov	eax, ds:dword_40600C
		test	eax, eax
		jle	loc_4016D4

loc_4015C7:				; CODE XREF: sub_4014B8+100j
		mov	eax, ds:dword_40601C
		test	eax, eax
		jle	short loc_4015F7
		mov	eax, ds:dword_406044
		mov	[esp+14h+var_10], eax
		mov	[esp+14h+var_14], offset dword_40609C
		call	sub_40147A
		mov	edx, ds:dword_406040
		mov	eax, ds:dword_406044
		add	eax, edx
		mov	ds:dword_406040, eax

loc_4015F7:				; CODE XREF: sub_4014B8+116j
		mov	ds:dword_40601C, 0
		mov	eax, ds:dword_40600C
		test	eax, eax
		jz	short loc_40163B
		mov	ds:dword_406044, 9
		mov	eax, ds:dword_406044
		mov	edx, 1
		mov	ecx, eax
		shl	edx, cl
		mov	eax, edx
		sub	eax, 1
		mov	ds:dword_4067C4, eax
		mov	ds:dword_40600C, 0
		jmp	loc_4016D4
; ---------------------------------------------------------------------------

loc_40163B:				; CODE XREF: sub_4014B8+150j
		mov	eax, ds:dword_406044
		add	eax, 1
		mov	ds:dword_406044, eax
		mov	edx, ds:dword_406044
		mov	eax, dword_402000
		cmp	edx, eax
		jnz	short loc_401663
		mov	eax, dword_402004
		mov	ds:dword_4067C4, eax
		jmp	short loc_4016D4
; ---------------------------------------------------------------------------

loc_401663:				; CODE XREF: sub_4014B8+19Dj
		mov	eax, ds:dword_406044
		mov	edx, 1
		mov	ecx, eax
		shl	edx, cl
		mov	eax, edx
		sub	eax, 1
		mov	ds:dword_4067C4, eax
		jmp	short loc_4016D4
; ---------------------------------------------------------------------------

loc_40167D:				; CODE XREF: sub_4014B8+1Ej
		mov	eax, ds:dword_40601C
		test	eax, eax
		jle	short loc_4016A9
		mov	eax, ds:dword_40601C
		add	eax, 7
		lea	edx, [eax+7]
		test	eax, eax
		cmovs	eax, edx
		sar	eax, 3
		mov	[esp+14h+var_10], eax
		mov	[esp+14h+var_14], offset dword_40609C
		call	sub_40147A

loc_4016A9:				; CODE XREF: sub_4014B8+1CCj
		mov	eax, ds:dword_40601C
		add	eax, 7
		lea	edx, [eax+7]
		test	eax, eax
		cmovs	eax, edx
		sar	eax, 3
		mov	edx, eax
		mov	eax, ds:dword_406040
		add	eax, edx
		mov	ds:dword_406040, eax
		mov	ds:dword_40601C, 0

loc_4016D4:				; CODE XREF: sub_4014B8+109j
					; sub_4014B8+17Ej ...
		add	esp, 8
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_4014B8	endp

; ---------------------------------------------------------------------------
		dd 0FFFFFFFFh, 0
		dd 0FFFFFFFFh, 46h dup(0)
		dd 200h	dup(?)
_text		ends

; Section 2. (virtual address 00002000)
; Virtual size			: 00000034 (	 52.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00000C00
; Flags	C0300040: Data Readable	Writable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 402000h
dword_402000	dd 10h			; DATA XREF: start+12w	start+1Cr ...
dword_402004	dd 10000h		; DATA XREF: start+2Cw	sub_4010D9+192r ...
dword_402008	dd 101h			; DATA XREF: sub_4010D9+9Er
					; sub_4010D9+BFr ...
		dd 2 dup(1)
dword_402014	dd 80h			; DATA XREF: sub_4010D9+76r
					; sub_4010D9+1C9r
dword_402018	dd 2710h		; DATA XREF: sub_4010D9+4Aw
					; sub_4010D9+1C0r ...
dword_40201C	dd 1			; DATA XREF: sub_4010D9+40w
					; sub_4010D9+E2r ...
byte_402020	db 0FFh			; DATA XREF: sub_4014B8+43r
		db 0FEh, 0FCh, 0F8h
		dd 80C0E0F0h
		db 0
byte_402029	db 0			; DATA XREF: sub_4014B8+31r
		dw 301h
		dd 3F1F0F07h, 0FF7Fh, 73h dup(0)
		align 1000h
_data		ends

; Section 3. (virtual address 00003000)
; Virtual size			: 00000014 (	 20.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00000E00
; Flags	40300040: Data Readable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 403000h
aGccGnu4_9_2	db 'GCC: (GNU) 4.9.2',0
		align 1000h
_rdata		ends

; Section 4. (virtual address 00004000)
; Virtual size			: 00000035 (	 53.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00001000
; Flags	40300040: Data Readable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_buildid	segment	dword public 'DATA' use32
		assume cs:_buildid
		;org 404000h
		dd 3 dup(0)
		dd 2, 19h, 401Ch, 101Ch, 53445352h, 9361402Eh, 0CCE3EA1Fh
		dd 0FDF4A871h, 0FDC64FDDh, 1, 73h dup(0)
		align 1000h
_buildid	ends

; Section 5. (virtual address 00005000)
; Virtual size			: 00000168 (	360.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00001200
; Flags	40300040: Data Readable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_eh_fram	segment	dword public 'DATA' use32
		assume cs:_eh_fram
		;org 405000h
		dd 14h,	0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 2	dup(1Ch), 0FFFFBFE0h
		dd 63h,	80E4100h, 0D420285h, 0C55F0205h, 4040Ch, 1Ch, 3Ch
		dd 0FFFFC023h, 76h, 80E4100h, 0D420285h, 0C5720205h, 4040Ch
		dd 2Ch,	5Ch, 0FFFFC079h, 206h, 80E4100h, 0D420285h, 3874605h
		dd 5830486h, 0C301F903h, 0C741C641h, 40CC541h, 4, 20h
		dd 8Ch,	0FFFFC24Fh, 0A4h, 80E4100h, 0D420285h, 3834405h
		dd 41C39B02h, 4040CC5h,	28h, 0B0h, 0FFFFC2CFh, 8Dh, 80E4100h
		dd 0D420285h, 3874305h,	5830486h, 41C38302h, 41C741C6h
		dd 4040CC5h, 1Ch, 0DCh,	0FFFFC330h, 48h, 80E4100h, 0D420285h
		dd 0C5440205h, 4040Ch, 1Ch, 0FCh, 0FFFFC358h, 22h, 80E4100h
		dd 0D420285h, 0CC55E05h, 404h, 1Ch, 11Ch, 0FFFFC35Ah, 3Eh
		dd 80E4100h, 0D420285h,	0CC57A05h, 404h, 2Ch, 13Ch, 0FFFFC378h
		dd 224h, 80E4100h, 0D420285h, 3874605h,	5830486h, 0C3021703h
		dd 0C741C641h, 40CC541h, 4, 26h	dup(0)
		align 1000h
_eh_fram	ends

; Section 6. (virtual address 00006000)
; Virtual size			: 000007C8 (   1992.)
; Section size in file		: 00000000 (	  0.)
; Offset to raw	data for section: 00000000
; Flags	C0700080: Bss Readable Writable
; Alignment	: 64 bytes
; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
; Segment alignment '64byte' can not be represented in assembly
_bss		segment	para public 'BSS' use32
		assume cs:_bss
		;org 406000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
dword_406000	dd ?			; DATA XREF: sub_4010D9:loc_401164w
					; sub_4010D9+18Cr ...
dword_406004	dd ?			; DATA XREF: sub_4010D9+1F3w
		dd ?
dword_40600C	dd ?			; DATA XREF: sub_4010D9+2Cw
					; sub_4012DF+88w ...
dword_406010	dd ?			; DATA XREF: sub_4010D9+36w
					; sub_4012DF:loc_401335r ...
		align 8
dword_406018	dd ?			; DATA XREF: sub_4010D9+22w
					; sub_4010D9:loc_401256r ...
dword_40601C	dd ?			; DATA XREF: sub_4010D9+Ew
					; sub_4014B8+9r ...
		align 40h
dword_406040	dd ?			; DATA XREF: sub_4010D9+18w
					; sub_4010D9+1E4r ...
dword_406044	dd ?			; DATA XREF: sub_4010D9+54w
					; sub_4010D9+5Er ...
		align 20h
dword_406060	dd 0Eh dup(?)		; DATA XREF: start+4Do
dword_406098	dd ?			; DATA XREF: start+34w
					; sub_4010D9:loc_4012B0r ...
dword_40609C	dd 5 dup(?)		; DATA XREF: sub_4014B8+15o
					; sub_4014B8+A8o ...
dword_4060B0	dd ?			; DATA XREF: start+43w	sub_401410+2Br	...
dword_4060B4	dd ?			; DATA XREF: start+39w	sub_401410+Cr ...
		align 10h
dword_4060C0	dd 0Dh dup(?)		; DATA XREF: start+43o	sub_401063+63o
dword_4060F4	dd ?			; DATA XREF: start+4Dw	sub_401458+Cr ...
		align 10h
dword_406100	dd ?			; DATA XREF: sub_4010D9+10Br
					; sub_4010D9:loc_4011FFr ...
		dd 12Fh	dup(?)
word_4065C0	dw ?			; DATA XREF: sub_4010D9+116r
					; sub_4010D9+155r ...
		align 4
		dd 80h dup(?)
dword_4067C4	dd ?			; DATA XREF: sub_4010D9+71w
					; sub_4014B8+F9r ...
		align 1000h
_bss		ends

; Section 7. (virtual address 00007000)
; Virtual size			: 00000014 (	 20.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00001400
; Flags	C0300040: Data Readable	Writable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Externs
; _idata




		end start
