;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2013 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3073-7154-46			    |
; |				  INRIA	NANCY				    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	17A2C0A04E30F550B38CE97812539C68
; Input	CRC32 :	BE454740

; File Name   :	/media/sf_ccs2015/malardalen/ns.exe
; Format      :	Portable executable for	80386 (PE)
; Imagebase   :	400000
; Section 1. (virtual address 00001000)
; Virtual size			: 00000154 (	340.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00000400
; Flags	60300020: Text Executable Readable
; Alignment	: 4 bytes

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	dword public 'CODE' use32
		assume cs:_text
		;org 401000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public start
start		proc near
		push	ebp
		mov	ebp, esp
		sub	esp, 8
		call	sub_40112E
		leave
		retn
start		endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_40100D	proc near		; CODE XREF: sub_40112E+Dp

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 10h
		mov	[ebp+var_C], 0
		jmp	loc_401118
; ---------------------------------------------------------------------------

loc_401021:				; CODE XREF: sub_40100D+10Fj
		mov	[ebp+var_10], 0
		jmp	loc_40110A
; ---------------------------------------------------------------------------

loc_40102D:				; CODE XREF: sub_40100D+101j
		mov	[ebp+var_14], 0
		jmp	loc_4010FC
; ---------------------------------------------------------------------------

loc_401039:				; CODE XREF: sub_40100D+F3j
		mov	[ebp+var_18], 0
		jmp	loc_4010EE
; ---------------------------------------------------------------------------

loc_401045:				; CODE XREF: sub_40100D+E5j
		mov	ecx, [ebp+var_14]
		mov	edx, [ebp+var_10]
		mov	ebx, [ebp+var_C]
		mov	eax, ecx
		shl	eax, 2
		add	eax, ecx
		imul	ecx, ebx, 7Dh
		add	ecx, eax
		mov	eax, edx
		shl	eax, 2
		add	eax, edx
		lea	edx, ds:0[eax*4]
		add	eax, edx
		lea	edx, [ecx+eax]
		mov	eax, [ebp+var_18]
		add	eax, edx
		mov	eax, dword_402000[eax*4]
		cmp	eax, [ebp+arg_0]
		jnz	short loc_4010EA
		mov	ecx, [ebp+var_14]
		mov	edx, [ebp+var_10]
		mov	ebx, [ebp+var_C]
		mov	eax, ecx
		shl	eax, 2
		add	eax, ecx
		imul	ecx, ebx, 7Dh
		add	ecx, eax
		mov	eax, edx
		shl	eax, 2
		add	eax, edx
		lea	edx, ds:0[eax*4]
		add	eax, edx
		lea	edx, [ecx+eax]
		mov	eax, [ebp+var_18]
		add	eax, edx
		mov	ebx, dword_402A00[eax*4]
		mov	ecx, [ebp+var_14]
		mov	edx, [ebp+var_10]
		mov	esi, [ebp+var_C]
		mov	eax, ecx
		shl	eax, 2
		add	eax, ecx
		imul	ecx, esi, 7Dh
		add	ecx, eax
		mov	eax, edx
		shl	eax, 2
		add	eax, edx
		lea	edx, ds:0[eax*4]
		add	eax, edx
		lea	edx, [ecx+eax]
		mov	eax, [ebp+var_18]
		add	eax, edx
		mov	eax, dword_402000[eax*4]
		add	eax, ebx
		jmp	short loc_401127
; ---------------------------------------------------------------------------

loc_4010EA:				; CODE XREF: sub_40100D+6Fj
		add	[ebp+var_18], 1

loc_4010EE:				; CODE XREF: sub_40100D+33j
		cmp	[ebp+var_18], 4
		jle	loc_401045
		add	[ebp+var_14], 1

loc_4010FC:				; CODE XREF: sub_40100D+27j
		cmp	[ebp+var_14], 4
		jle	loc_401039
		add	[ebp+var_10], 1

loc_40110A:				; CODE XREF: sub_40100D+1Bj
		cmp	[ebp+var_10], 4
		jle	loc_40102D
		add	[ebp+var_C], 1

loc_401118:				; CODE XREF: sub_40100D+Fj
		cmp	[ebp+var_C], 4
		jle	loc_401021
		mov	eax, 0FFFFFFFFh

loc_401127:				; CODE XREF: sub_40100D+DBj
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	ebp
		retn
sub_40100D	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_40112E	proc near		; CODE XREF: start+6p

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 4
		mov	[esp+4+var_4], 190h
		call	sub_40100D
		leave
		retn
sub_40112E	endp

; ---------------------------------------------------------------------------
		align 4
		dd 0FFFFFFFFh, 0
		dd 0FFFFFFFFh, 2Ch dup(0)
		dd 380h	dup(?)
_text		ends

; Section 2. (virtual address 00002000)
; Virtual size			: 00001400 (   5120.)
; Section size in file		: 00001400 (   5120.)
; Offset to raw	data for section: 00000600
; Flags	C0700040: Data Readable	Writable
; Alignment	: 64 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
; Segment alignment '64byte' can not be represented in assembly
_data		segment	para public 'DATA' use32
		assume cs:_data
		;org 402000h
dword_402000	dd 0			; DATA XREF: sub_40100D+65r
					; sub_40100D+D2r
		dd 7Ch dup(0)
		dd 7Dh dup(1), 7Dh dup(2), 7Dh dup(3), 7Ch dup(4), 191h
		dd 0Fh dup(0)
dword_402A00	dd 7Bh			; DATA XREF: sub_40100D+9Er
		dd 7Ch dup(7Bh), 7Dh dup(0EAh),	4 dup(159h), 0
		dd 4 dup(159h),	0
		dd 4 dup(159h),	0
		dd 4 dup(159h),	0
		dd 4 dup(159h),	0
		dd 4 dup(159h),	0
		dd 4 dup(159h),	0
		dd 4 dup(159h),	0
		dd 4 dup(159h),	0
		dd 4 dup(159h),	0
		dd 4 dup(159h),	0
		dd 4 dup(159h),	0
		dd 4 dup(159h),	0
		dd 4 dup(159h),	0
		dd 4 dup(159h),	0
		dd 4 dup(159h),	0
		dd 4 dup(159h),	0
		dd 4 dup(159h),	0
		dd 4 dup(159h),	0
		dd 4 dup(159h),	0
		dd 4 dup(159h),	0
		dd 4 dup(159h),	0
		dd 4 dup(159h),	0
		dd 4 dup(159h),	0
		dd 4 dup(159h),	0
		dd 7Dh dup(1C8h), 7Ch dup(237h), 457h, 0Fh dup(0)
		align 1000h
_data		ends

; Section 3. (virtual address 00004000)
; Virtual size			: 00000014 (	 20.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00001A00
; Flags	40300040: Data Readable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 404000h
aGccGnu4_9_2	db 'GCC: (GNU) 4.9.2',0
		align 1000h
_rdata		ends

; Section 4. (virtual address 00005000)
; Virtual size			: 00000035 (	 53.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00001C00
; Flags	40300040: Data Readable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_buildid	segment	dword public 'DATA' use32
		assume cs:_buildid
		;org 405000h
		dd 3 dup(0)
		dd 2, 19h, 501Ch, 1C1Ch, 53445352h, 0B7DB6614h,	0FFD557F2h
		dd 4D85FC23h, 32A2A87Fh, 1, 73h	dup(0)
		align 1000h
_buildid	ends

; Section 5. (virtual address 00006000)
; Virtual size			: 00000084 (	132.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00001E00
; Flags	40300040: Data Readable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_eh_fram	segment	dword public 'DATA' use32
		assume cs:_eh_fram
		;org 406000h
		dd 14h,	0
		dd 527A01h, 1087C01h, 4040C1Bh,	188h, 2	dup(1Ch), 0FFFFAFE0h
		dd 0Dh,	80E4100h, 0D420285h, 0CC54905h,	404h, 28h, 3Ch
		dd 0FFFFAFCDh, 121h, 80E4100h, 0D420285h, 3864505h, 16030483h
		dd 0C641C301h, 40CC541h, 4, 1Ch, 68h, 0FFFFB0C2h, 14h
		dd 80E4100h, 0D420285h,	0CC55005h, 404h, 5Fh dup(0)
		align 1000h
_eh_fram	ends

; Section 6. (virtual address 00007000)
; Virtual size			: 00000014 (	 20.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00002000
; Flags	C0300040: Data Readable	Writable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Externs
; _idata




		end start
